import fs from "fs";
import MagicString from "magic-string";
import path from "path";
import testCode from "./test.code.js";
import testRunnerCode from "./test_runner.code.js";

const TEST_LIST_EVENT = "__test_list__";

function isTransformed(code) {
    return (/generated by Svelte/).test(code);
}
/**
 * @param {{}} [_options]
 * @returns {import('vite').Plugin}
 */
 export default function sveltekitPluginTest(_options = {}) {
    /** @type {import("vite").ResolvedConfig} */
    let config;
    /** @type {import("vite").ViteDevServer} */
    let server;
    return {
        name: "sveltekit-plugin-test",
        apply: "serve",
        configResolved(_config) {
            config = _config;
        },
        configureServer(_server) {
            server = _server;
            server.middlewares.use("/__sveltekit_test", (req, res) => {
                const code = testCode.replace(/__COMPONENT_PATH__/g, `${req.url}`);
                res.write(`<script type=module>${code}</script>`);
                res.end();
            });
        },
        transform(code, id) {
            if (!id.endsWith(".svelte") || !isTransformed(code)) return;
            if (id.endsWith("generated/root.svelte")) {
                const magicString = new MagicString(code);
                magicString.append(`\n${generateTestRunner(testRunnerCode)}`);
                return {
                    code: magicString.toString(),
                    map: magicString.generateMap(),
                };
            }
            const { dir, ext, name } = path.parse(id);
            const testPath = path.join(dir, `${name}.test${ext}`);
            if (!fs.existsSync(testPath)) return;

            const files = [];
            const stat = fs.statSync(testPath);
            if (stat.isDirectory()) {
                const resolved = fs.readdirSync(testPath)
                    .map((filename) => path.join(testPath, filename))
                    .filter((filepath) => fs.statSync(filepath).isFile());
                Object.assign(files, resolved);
            } else {
                files.push(testPath);
            }

            server.ws.send({
                type: "custom",
                event: TEST_LIST_EVENT,
                data: files,
            });
        }
    };
}

function generateTestRunner(code) {
    return code
        .replace(/__TEST_LIST_EVENT__/g, JSON.stringify(TEST_LIST_EVENT));
}